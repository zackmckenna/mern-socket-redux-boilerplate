{"version":3,"sources":["logo.svg","components/LoginForm.js","components/TopNavbar.js","services/user.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LoginForm","md","className","label","icon","group","type","validate","error","success","NavbarTop","state","isOpen","toggleCollapse","setState","color","dark","expand","onClick","this","id","navbar","left","active","to","nav","caret","href","right","Component","baseUrl","axios","get","App","useState","setUsers","useEffect","console","log","userService","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"iKAAAA,EAAOC,QAAU,IAA0B,kC,wJCyB5BC,EAtBG,WAClB,OACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,GAAG,KACT,8BACE,uBAAGC,UAAU,uBAAb,WACA,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAUC,MAAM,kBAAkBC,KAAK,WAAWC,OAAK,EAACC,KAAK,QAAQC,UAAQ,EAACC,MAAM,QAClFC,QAAQ,UACV,kBAAC,IAAD,CAAUN,MAAM,qBAAqBC,KAAK,OAAOC,OAAK,EAACC,KAAK,WAAWC,UAAQ,KAEjF,yBAAKL,UAAU,eACb,kBAAC,IAAD,oB,gDC2CKQ,E,2MAnDfC,MAAQ,CACNC,QAAQ,G,EAGVC,eAAiB,WACf,EAAKC,SAAS,CAAEF,QAAS,EAAKD,MAAMC,U,wEAIpC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWG,MAAM,SAASC,MAAI,EAACC,OAAO,MACpC,kBAAC,IAAD,KACE,4BAAQf,UAAU,cAAlB,kBAEF,kBAAC,IAAD,CAAkBgB,QAASC,KAAKN,iBAChC,kBAAC,IAAD,CAAaO,GAAG,kBAAkBR,OAAQO,KAAKR,MAAMC,OAAQS,QAAM,GACjE,kBAAC,IAAD,CAAcC,MAAI,GAChB,kBAAC,IAAD,CAAYC,QAAM,GAChB,kBAAC,IAAD,CAAYC,GAAG,MAAf,SAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYA,GAAG,MAAf,aAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYA,GAAG,MAAf,YAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAmBC,KAAG,EAACC,OAAK,GAC1B,0BAAMxB,UAAU,QAAhB,aAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAiByB,KAAK,MAAtB,UACA,kBAAC,IAAD,CAAiBA,KAAK,MAAtB,kBACA,kBAAC,IAAD,CAAiBA,KAAK,MAAtB,uBACA,kBAAC,IAAD,CAAiBA,KAAK,MAAtB,2BAKR,kBAAC,IAAD,CAAcC,OAAK,W,GA1CLC,a,iBCNlBC,EAAU,kCAcD,EAZA,WACb,OAAOC,IAAMC,IAAIF,ICmBJG,EAhBF,WAAO,IAAD,EACUC,mBAAS,MADnB,mBACFC,GADE,WAQjB,OALCC,qBAAU,WACRC,QAAQC,IAAIC,KACZJ,EAASI,OACR,IAGF,yBAAKrC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCNYsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/C,GACL6B,QAAQ7B,MAAMA,EAAMgD,c","file":"static/js/main.f0dea6b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react'\nimport { MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn } from 'mdbreact';\n\nconst LoginForm = () => {\nreturn (\n<MDBContainer>\n  <MDBRow>\n    <MDBCol md=\"6\">\n      <form>\n        <p className=\"h5 text-center mb-4\">Sign in</p>\n        <div className=\"grey-text\">\n          <MDBInput label=\"Type your email\" icon=\"envelope\" group type=\"email\" validate error=\"wrong\"\n            success=\"right\" />\n          <MDBInput label=\"Type your password\" icon=\"lock\" group type=\"password\" validate />\n        </div>\n        <div className=\"text-center\">\n          <MDBBtn>Login</MDBBtn>\n        </div>\n      </form>\n    </MDBCol>\n  </MDBRow>\n</MDBContainer>\n);\n};\n\nexport default LoginForm;\n","import React, { Component } from \"react\";\nimport {\nMDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse, MDBFormInline,\nMDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem\n} from \"mdbreact\";\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nclass NavbarTop extends Component {\nstate = {\n  isOpen: false\n};\n\ntoggleCollapse = () => {\n  this.setState({ isOpen: !this.state.isOpen });\n}\n\nrender() {\n  return (\n    <Router>\n      <MDBNavbar color=\"indigo\" dark expand=\"md\">\n        <MDBNavbarBrand>\n          <strong className=\"white-text\">skeleton card</strong>\n        </MDBNavbarBrand>\n        <MDBNavbarToggler onClick={this.toggleCollapse} />\n        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\n          <MDBNavbarNav left>\n            <MDBNavItem active>\n              <MDBNavLink to=\"#!\">Home</MDBNavLink>\n            </MDBNavItem>\n            <MDBNavItem>\n              <MDBNavLink to=\"#!\">Features</MDBNavLink>\n            </MDBNavItem>\n            <MDBNavItem>\n              <MDBNavLink to=\"#!\">Pricing</MDBNavLink>\n            </MDBNavItem>\n            <MDBNavItem>\n              <MDBDropdown>\n                <MDBDropdownToggle nav caret>\n                  <span className=\"mr-2\">Dropdown</span>\n                </MDBDropdownToggle>\n                <MDBDropdownMenu>\n                  <MDBDropdownItem href=\"#!\">Action</MDBDropdownItem>\n                  <MDBDropdownItem href=\"#!\">Another Action</MDBDropdownItem>\n                  <MDBDropdownItem href=\"#!\">Something else here</MDBDropdownItem>\n                  <MDBDropdownItem href=\"#!\">Something else here</MDBDropdownItem>\n                </MDBDropdownMenu>\n              </MDBDropdown>\n            </MDBNavItem>\n          </MDBNavbarNav>\n          <MDBNavbarNav right>\n            {/* things to go right */}\n          </MDBNavbarNav>\n        </MDBCollapse>\n      </MDBNavbar>\n    </Router>\n    );\n  }\n}\n\nexport default NavbarTop;\n","import axios from 'axios'\nconst baseUrl = 'http://localhost:3003/api/users'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nexport default {\n  getAll: getAll,\n  create: create,\n  update: update\n}\n","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport LoginForm from './components/LoginForm';\nimport NavbarTop from './components/TopNavbar';\nimport userService from './services/user'\n\n const App = () => {\n   const [users, setUsers] = useState(null)\n\n   useEffect(() => {\n     console.log(userService.getAll())\n     setUsers(userService.getAll())\n   }, [])\n\n  return (\n    <div className=\"App\">\n        <NavbarTop />\n        <LoginForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}